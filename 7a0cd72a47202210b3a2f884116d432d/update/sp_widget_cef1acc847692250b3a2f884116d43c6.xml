<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $http, spUtil) {
    var c = this;
    
    // Initialize variables
    c.loading = true;
    c.noRecords = false;
    
    // Load initial data
    c.server.update().then(function() {
        c.loading = false;
        if (c.data.error) {
            console.error(c.data.error);
        }
        if (!c.data.pendingEnrollments || c.data.pendingEnrollments.length === 0) {
            c.noRecords = true;
        }
    });
    
    // Refresh function
    c.refreshList = function() {
        c.loading = true;
        c.server.update().then(function() {
            c.loading = false;
            if (!c.data.pendingEnrollments || c.data.pendingEnrollments.length === 0) {
                c.noRecords = true;
            } else {
                c.noRecords = false;
            }
        });
    };
    
    // Approve enrollment function
    c.approveEnrollment = function(enrollment, index) {
        // Set processing flag on this specific enrollment
        enrollment.processing = true;
        
        $http({
            method: 'PUT',
            url: '/api/now/table/x_1620151_class_en_enrollments/' + enrollment.sys_id,
            data: {
                state: 'Enrolled',
                work_notes: 'Approved by administrator via approval widget'
            }
        }).then(function(response) {
            spUtil.addInfoMessage("Enrollment approved successfully");
            
            // Remove the approved item from the local array immediately
            c.data.pendingEnrollments.splice(index, 1);
            
            // Check if we need to show "no records" message
            if (c.data.pendingEnrollments.length === 0) {
                c.noRecords = true;
            }
            
        }, function(error) {
            spUtil.addErrorMessage("Error approving enrollment: " + 
                (error.data.error ? error.data.error.message : "Unknown error"));
            enrollment.processing = false;
        });
    };
    
    // Reject enrollment function
    c.rejectEnrollment = function(enrollment, index) {
        // Set processing flag on this specific enrollment
        enrollment.processing = true;
        
        $http({
            method: 'PUT',
            url: '/api/now/table/x_1620151_class_en_enrollments/' + enrollment.sys_id,
            data: {
                state: 'Not Enrolled',
                work_notes: 'Rejected by administrator via approval widget'
            }
        }).then(function(response) {
            spUtil.addInfoMessage("Enrollment rejected successfully");
            
            // Remove the rejected item from the local array immediately
            c.data.pendingEnrollments.splice(index, 1);
            
            // Check if we need to show "no records" message
            if (c.data.pendingEnrollments.length === 0) {
                c.noRecords = true;
            }
            
        }, function(error) {
            spUtil.addErrorMessage("Error rejecting enrollment: " + 
                (error.data.error ? error.data.error.message : "Unknown error"));
            enrollment.processing = false;
        });
    };
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.enrollment-approval-widget {
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  margin-bottom: 20px;
}

.enrollment-approval-widget .panel-heading {
  background-color: #1976d2;
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.enrollment-approval-widget .panel-title {
  display: inline-block;
  margin-top: 2px;
  margin-bottom: 0;
}

.enrollment-approval-widget .table {
  margin-bottom: 0;
}

.enrollment-approval-widget .table th {
  background-color: #f5f5f5;
  color: #333;
}

.enrollment-approval-widget .btn-success {
  background-color: #4caf50;
  border-color: #43a047;
}

.enrollment-approval-widget .btn-danger {
  background-color: #f44336;
  border-color: #e53935;
}

.enrollment-approval-widget .btn {
  margin: 0 3px;
  padding: 5px 12px;
  border-radius: 3px;
  transition: all 0.2s ease;
}

.enrollment-approval-widget .btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

/* For mobile responsiveness */
@media (max-width: 768px) {
  .enrollment-approval-widget .table-responsive {
    border: none;
  }
  
  .enrollment-approval-widget .btn {
    display: block;
    width: 100%;
    margin: 3px 0;
  }
}

/* Success message styling */
.alert-success {
  background-color: #dff0d8;
  border-color: #d6e9c6;
  color: #3c763d;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>cem_admin_approval</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>CEM Admin Approval</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    // Initialize data structure
    data.pendingEnrollments = [];
    
    try {
        // Get proper table names to avoid errors
        var enrollmentTable = 'x_1620151_class_en_enrollments';
        var courseTable = 'x_1620151_class_en_courses'; // Make sure this is correct (plural/singular)
        var classTable = 'x_1620151_class_en_classes'; // Make sure this is correct (plural/singular)
        
        // Use GlideRecordSecure to handle cross-scope access
        var gr = new GlideRecordSecure(enrollmentTable);
        gr.addQuery('state', 'Pending'); // Make sure this exactly matches your 'pending' state value
        gr.orderByDesc('sys_created_on');
        gr.query();
        
        while (gr.next()) {
            try {
                // Get student name
                var studentName = '';
                if (gr.student) {
                    var studentGR = GlideRecord('sys_user');
                    if (studentGR.get(gr.student)) {
                        studentName = studentGR.getDisplayValue();
                    } else {
                        studentName = gr.student.getDisplayValue() || 'Unknown';
                    }
                }
                
                // Get course details
                var courseId = '';
                var courseName = '';
                if (gr.course) {
                    try {
                        var courseGR = new GlideRecordSecure(courseTable);
                        if (courseGR.get(gr.course)) {
                            courseId = courseGR.getValue('course_id') || '';
                            courseName = courseGR.getValue('course_name') || '';
                        }
                    } catch (courseErr) {
                        gs.error('Error getting course data: ' + courseErr);
                        courseId = 'Error';
                        courseName = 'Could not load course';
                    }
                }
                
                // Get section details
                var sectionName = '';
                if (gr.section) {
                    try {
                        var sectionGR = new GlideRecordSecure(classTable);
                        if (sectionGR.get(gr.section)) {
                            sectionName = sectionGR.getValue('section') || '';
                        }
                    } catch (sectionErr) {
                        gs.error('Error getting section data: ' + sectionErr);
                        sectionName = 'Error';
                    }
                }
                
                // Add enrollment record to list
                data.pendingEnrollments.push({
                    sys_id: gr.getUniqueValue(),
                    number: gr.getValue('number') || '',
                    student_name: studentName,
                    course_id: courseId,
                    course_name: courseName,
                    section: sectionName,
                    created_date: gr.getDisplayValue('sys_created_on'),
                    processing: false // Flag for UI state
                });
            } catch (recordErr) {
                gs.error('Error processing enrollment record: ' + recordErr);
            }
        }
        
        // Debug info
        gs.info('Found ' + data.pendingEnrollments.length + ' pending enrollments');
    } catch (e) {
        gs.error('Error in CEM Admin Approval widget: ' + e);
        data.error = 'Error loading enrollments: ' + e;
    }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-05-11 12:52:35</sys_created_on>
        <sys_id>cef1acc847692250b3a2f884116d43c6</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>CEM Admin Approval</sys_name>
        <sys_package display_value="Class Enrollment Management" source="x_1620151_class_en">7a0cd72a47202210b3a2f884116d432d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Class Enrollment Management">7a0cd72a47202210b3a2f884116d432d</sys_scope>
        <sys_update_name>sp_widget_cef1acc847692250b3a2f884116d43c6</sys_update_name>
        <sys_updated_by>cem_admin.John</sys_updated_by>
        <sys_updated_on>2025-05-12 11:32:52</sys_updated_on>
        <template><![CDATA[<div class="panel panel-primary enrollment-approval-widget">
  <div class="panel-heading">
    <div class="pull-right">
      <button class="btn btn-xs btn-default" ng-click="c.refreshList()" title="Refresh List">
        <i class="fa fa-refresh" ng-class="{'fa-spin': c.loading}"></i>
      </button>
    </div>
    <h3 class="panel-title"><i class="fa fa-check-square"></i> Pending Enrollment Approvals</h3>
  </div>
  
  <div class="panel-body">
    <!-- Loading indicator -->
    <div ng-if="c.loading" class="text-center p-3">
      <i class="fa fa-spinner fa-spin fa-2x"></i>
      <p>Loading enrollment requests...</p>
    </div>
    
    <!-- Error message -->
    <div ng-if="c.data.error" class="alert alert-danger">
      <i class="fa fa-exclamation-triangle"></i> {{c.data.error}}
    </div>
    
    <!-- No requests message -->
    <div ng-if="!c.loading && (!c.data.pendingEnrollments || c.data.pendingEnrollments.length === 0)" class="alert alert-info">
      <i class="fa fa-info-circle"></i> There are no pending enrollment requests to approve.
    </div>
    
    <!-- Requests table -->
    <div ng-if="!c.loading && c.data.pendingEnrollments.length > 0" class="table-responsive">
      <table class="table table-striped table-hover">
        <thead>
          <tr>
            <th>Number</th>
            <th>Student</th>
            <th>Course</th>
            <th>Section</th>
            <th>Date Requested</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr ng-repeat="enrollment in c.data.pendingEnrollments track by enrollment.sys_id">
            <td>{{enrollment.number}}</td>
            <td>{{enrollment.student_name}}</td>
            <td>{{enrollment.course_id}}: {{enrollment.course_name}}</td>
            <td>{{enrollment.section}}</td>
            <td>{{enrollment.created_date}}</td>
            <td>
              <button class="btn btn-success btn-sm" ng-click="c.approveEnrollment(enrollment, $index)" ng-disabled="enrollment.processing">
                <i class="fa fa-check" ng-if="!enrollment.processing"></i>
                <i class="fa fa-spinner fa-spin" ng-if="enrollment.processing"></i> Approve
              </button>
              <button class="btn btn-danger btn-sm" ng-click="c.rejectEnrollment(enrollment, $index)" ng-disabled="enrollment.processing">
                <i class="fa fa-times" ng-if="!enrollment.processing"></i>
                <i class="fa fa-spinner fa-spin" ng-if="enrollment.processing"></i> Reject
              </button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>cef1acc847692250b3a2f884116d43c6</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-05-11 12:52:35</sys_created_on>
        <sys_id>0ef1acc847692250b3a2f884116d43c9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-11 12:52:35</sys_updated_on>
        <table>sp_widget</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
